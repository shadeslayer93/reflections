What happens when you initialize a repository? Why do you need to do it?
-	When we initialize a repository, a .git folder is created, which stores the metadata, regarding this repository. To track the history of the file contents in this repository , it is important to first convert it, into a Git repository, for which the init command is used. To initalize a folder into a Git repository, "git init" is used, in that folder. After that the status of the repository can be found out using the "git status" command.

How is the staging area different from the working directory and the repository? What value do you think it offers?
-	The staging area contains those files from the working directory, that you want to clump together in one commit. Files are added to the staging area from the working directory using the "git add <file-name>" . In this way, instead of adding all, files and committing them each time, we can commit only those files in which a logical change is occuring.

How can you use the staging area to make sure you have one commit per logical change?
-	Only those files are added to the staging area , where a logical change has occurred. And when committed, all the files come under one commit. 

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-	In Git, branches can be used, whenever we want to test a new experimental feature, or try another version of the current project, without affecting the working of the main project. To check the current branch we are working in , just type "git branch". To add a new branch, type "git branch <branch-name>". To access the other branch, type "git checkout <branch-name>"

How do the diagrams help you visualize the branch structure?
-	The diagrams, help us give an idea, about which all commits are accesible, also , which commits branches off , from which particular location, and also, if any , which commits are unaccesible.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
-	On merging two branches, we can access the commits of both the branches, but a commit on one branch will not be able to see the changes introduced by a commit in another branch. Hence, they are represented that way in the diagram.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
-	Git's automatic merging is useful, when different functions or lines have been modified in each of the versions/branches, and they need to be combined into one. However, if the same function or feature has been modified differently, in both the versions/branches, Git's merges manually. This is useful, since the two users, can discuss with each other, about which modification of the same function, is more efficient (terms of memory and speed) and accordingly decide which one to add to the final merged commit.